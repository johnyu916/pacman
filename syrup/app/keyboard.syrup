from wafflecore.compute import (matrix_placement, rotates_ortho_new, cuboid_transformed, axis_sign_vector, sum_arrays, nullify_input)
from wafflecore.animation import animate
from wafflecore.camera import camera_translate

(object keyboard) new_keyboard():
    KEYS = ["a","d","s","w", "c", "e", "j", "l", "k", "i"]
    keys = {}
    for key in KEYS:
        keys{key} = "KEY_UP"
    keyboard = { "keys_state": keys }
# if you hold the key down, glut will keep generating key_pressed events
() keyboard_on_event(object state, string button, string key_state):
    keys_state = state.keyboard.keys_state
    for key in keys(keys_state):
        if button == key:
            old_state = keys_state{button}
            if old_state != key_state:
                keys_state{button} = key_state
            break

# if any key is down, move in that direction (but only one
# direction).
# if no key is down, don't move.
() keyboard_idle(object state):
    move_pacman(state)

    move_camera(state)
    #keyboard_none(state)
    #record("handler released: {}".format( key))

() keyboard_none(object state):
    state.pacman.velocity = [0.0, 0.0, 0.0]

(number next) loop_next(number index, number length):
    next = index + 1
    if next >= length:
        next = 0

() animate_pacman(object state, object pacman, object elapsed_time):
    animation = state.animations.pacman
    animate(animation, pacman, state.geometries, elapsed_time)

# assumes that by default:
#  1. pacman is facing right.
#  2. pacman's bounds position is [0.0, 0.0, 0.0].
() place_pacman(object pacman, number axis, number sign):
    matrix = matrix_placement(pacman.position, pacman.rotates)
    #print(["place_pacman matrix", matrix])
    bounds = pacman.bounds
    (new_point, new_size) = cuboid_transformed(matrix, bounds.position, bounds.size)
    #point = point_transformed(matrix, pacman.bounds.position)
    #print(["place_pacman position rotates, point", pacman.position, pacman.rotates, new_point])
    bound_size = bounds.size
    if axis == 0:
        if sign == 0:
            pacman.position = [new_point[0] + bound_size[0], new_point[1] + bound_size[1], new_point[2]]
            pacman.rotates = rotates_ortho_new(180, 2, 0, 0)
        else:
            pacman.position = new_point
            pacman.rotates = []
    elif axis == 1:
        return
    elif axis == 2:
        if sign == 0:
            pacman.position = [new_point[0], new_point[1], new_point[2] + bound_size[2]]
            pacman.rotates = rotates_ortho_new(90, 1, 0, 0)
        else:
            pacman.position = [new_point[0] + bound_size[0], new_point[1], new_point[2]]
            pacman.rotates = rotates_ortho_new(270, 1, 0, 0)

(bool yes) is_array_zero(array vector):
    yes = vector[0] == 0.0 && vector[1] == 0.0 && vector[2] == 0.0

() move_pacman(object state):
    keys_state = state.keyboard.keys_state

    pacman = state.pacman

    if is_array_zero(pacman.position_delta):
        pacman.animate_start = state.now
    else:
        (axis, sign) = axis_sign_vector(pacman.position_delta)
        place_pacman(pacman, axis, sign)

    elapsed_time = state.now - pacman.animate_start

    #print(["keyboard_on_down inside", key, key_state])
    move_keys = ["j", "l", "k", "i"]
    #plus = state.pacman.input_velocity
    plus = pacman.input_force
    minus = -1*plus
    forces = [[minus,0,0], [plus,0,0],[0,0,minus],[0,0,plus]]
    #velocities = [[minus,0,0], [plus,0,0],[0,0,minus],[0,0,plus]]
    places = [[0,0], [0,1], [1,0], [1,1]]
    #velocity = [0.0, 0.0, 0.0]
    force = [0.0, 0.0, 0.0]

    for key in keys(keys_state):
        key_state = keys_state{key}
        if key_state == "KEY_UP":
            continue
        for i in range(4):
            if key == move_keys[i]:
                #velocity = sum_arrays(velocity, velocities[i])
                force = sum_arrays(force, forces[i])
                #print(["keyboard_on_down", key, key_state, velocity])
    if force[0] == 0.0 && force[1] == 0.0 && force[2] == 0.0:
        # stop it.
        pacman.force = force
        pacman.velocity = [0.0,0.0,0.0]
    else:
        pacman.force = oppose_force(pacman, force)
        #print(["pacmans force", pacman.force])
    #pacman.velocity = velocity
    # cap pacman's velocity
    cap_velocity(pacman)
    animate_pacman(state, pacman, elapsed_time)

() cap_velocity(object pacman):
    velocity = pacman.velocity
    max_speed = pacman.max_speed
    min_speed = -1*max_speed
    for i in range(3):
        if velocity[i] > max_speed:
            velocity[i] = max_speed
        elif velocity[i] < min_speed:
            velocity[i] = min_speed

(array force) oppose_force(object thing, array input):
    #print(["pacman input 0", input])
    for touch in thing.touching:
        for normal in touch.normals:
            input = nullify_input(normal, input)
    #print(["pacman input 1", input])
    force = input

() move_camera(object state):
    keys_state = state.keyboard.keys_state
    camera = state.camera
    scale = 1.0
    rotate_scale = 0.1
    translate_keys = ["a", "d", "s", "w", "c", "e"]
    axes = [ [0,0], [0,1], [1,0], [1,1], [2,0], [2,1] ]
    #print(["camera before", camera.placement])
    for key in keys(keys_state):
        key_state = keys_state{key}
        if key_state == "KEY_UP":
            continue
        for i in range(6):
            this_key = translate_keys[i]
            if key == this_key:
                camera_translate(scale, axes[i][0], axes[i][1], camera)

