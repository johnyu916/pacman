from keyboard import keyboard_idle
() idle(object state):
    now = time()
    delta = now - state.now
    keyboard_idle(state)

    # get all forces first.
    pacman = state.pacman
    pacman_id = pacman.id
    matrix = matrix_placement(pacman.position, pacman.rotates)
    bounds = pacman.bounds
    (new_point, new_size) = cuboid_transformed(matrix, bounds.position, bounds.size)
    for child in state.world.children:
        if child.id != pacman_id:
            matrix = matrix_placement(child.position, child.rotates)
            bounds = child.bounds
            (child_point, child_size) = cuboid_transformed(matrix, bounds.position, bounds.size)
            # see if they touch. axis vector
            (axis, sign) = face_overlap(new_point, new_size, child_point, child_size)
            if axis == null:
                continue

            friction_mag = 0
            if sign == 0:
                if thing.force[axis] < 0:
                    friction_mag = coef * thing.force[axis]
            else:
                if thing.force[axis] > 0:
                    friction_mag = coef * thing.force[axis]

            friction = scaled_array(vector_unit(thing.velocity), friction_mag)
            # decrease the force in that direction up to 0.
            thing.force = sum_arrays(thing.force, friction)

    # try moving, then back off.
    accel = scaled_array(thing.force, 1.0/thing.mass)
    velocity_i = pacman.velocity
    velocity_f = sum_arrays(scaled_array(accel * delta), velocity_i)
    velocity_avg = scaled_array(sum_arrays(velocity_f, velocity_i) , 1/2.0)
    pacman.velocity = velocity_f

    displacement = scaled_array(velocity_avg, delta)
    pacman.position = sum_arrays(pacman.position, distance_delta)

    move(state, displacement, delta)
