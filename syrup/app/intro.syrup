() step_set(object scene, string name):
    for step in scene.steps:
        if step.name == name:
            scene.step = step
            scene.step.status = "start"
            break


() intro_start(object state):
    intro = state.game.scene
    intro.time_start = state.now
    intro.steps = [
        {
            "name": "texts",
            "status": "start"
        },
        {
            "name": "run",
            "status": "start"
        }
    ]
    state.world.children = [intro.texts[0]]

() intro_idle(object state):
    intro = state.game.scene
    step_name = intro.step.name
    if step_name == "texts":
        if scene.status == "start":
            intro_texts_start(state)
        else:
            intro_texts_idle(state)
    elif step == "run":
        if scene.status == "start":
            intro_run_start(state)
        else:
            intro_run_idle(state)

() intro_texts_start(object state):
    state.game.scene.step.status = "idle"

() intro_texts_idle(object state):
    intro = state.game.scene
    elapsed = state.now - intro.time_start
    if elapsed > 2.0:
        step_set(intro, "run")
        print(["set game state to intro_run"])
        #state.game.state = get_scene(state, "intro_run")
        #state.game.state.status = "start"
    elif elapsed > 1.0:
        state.world.children = [intro.texts[0], intro.texts[1]]

() intro_run_start(object state):
    game = state.game
    game.ball = thing_new(new_id(state), "Ball", [0,0,0], [], [], state.geometries.ball, null)
    state.world.children = [game.pacman, game.ball]
    extend(state.world.children, game.number_bubbles)
    z = 117
    v_x = -100
    game.ball.position = [33.0, 0.0, 120]
    pacman = game.pacman
    thing_set_position(pacman, [224.0, 0.0, z])
    print(["pacman world bounds", pacman.world_bounds])
    pacman.velocity = [v_x, 0, 0]
    pacman.animate_start = state.now
    place_pacman(pacman, 0, 0)
    x = 250
    for enemy in game.enemies:
        enemy.position = [x, 0.0, z]
        enemy.velocity = [v_x, 0, 0]
        thing_set_world_bounds(enemy, matrix_identity())
        print(["enemy world bounds", enemy.world_bounds])
        x+=16
    extend(state.world.children, game.enemies)
    game.guys_paused = false
    state.game.scene.step.status = "idle"

# framework for pausing until child is done.
# normal: setup, run, setup, run, setup, run
# subroutine: setup, run, pause, setup, run, resume
# basically, there are children that you block wait on,
# and children that run in parallel (though you do have to wait 
# for them to finish when you are done)

() intro_run_idle(object state):
    game = state.game
    pacman = game.pacman


    if game.guys_paused:
        # hang tight
        #print(["paused", state.now - game.guys_paused_start])
        if (state.now - game.guys_paused_start) > 1.0:
            game.guys_paused = false
            game.pacman.position[1] = 0.0
            game.number_bubbles[0].position[1] = -100.0
    else:
        delta = state.delta
        bump_thing(pacman, game.enemies, delta)
        print(["pacman world bounds", pacman.world_bounds])
        #distance_delta = position_delta(pacman, delta)
        distance_delta = pacman.position_delta
        #print(["distance delta", distance_delta])
        #pacman.position = sum_arrays(pacman.position, distance_delta)
        #thing_set_world_bounds(pacman, matrix_identity())
        animate(state.animations.pacman, state.things, state.geometries, state.now - pacman.animate_start)
        for enemy in game.enemies:
            move_velocity(state, enemy, enemy.velocity)
            if enemy.velocity[0] < 0:
                enemy.position = sum_arrays(enemy.position, distance_delta)
            else:
                enemy.position = sum_arrays(enemy.position, [distance_delta[0]/2, 0, 0])
            thing_set_world_bounds(enemy, matrix_identity())
            print(["enemy world bounds", enemy.world_bounds])
        for touch in pacman.collisions:
            print(["run_idle hit something", touch.thing.type])
            if touch.thing.type == "Enemy":
                # both pacman and enemy disappears.
                # number appears.
                # frozen for a second.
                game.guys_paused = true
                game.guys_paused_start = state.now
                game.pacman.position[1] = -100
                touch.thing.position[1] = -100
                game.number_bubbles[0].position = [pacman.position[0], 0, pacman.position[2]]
                break


    if pacman.world_bounds.position[0] < 41:
        v_x = 100
        pacman.velocity = [v_x, 0, 0]
        place_pacman(pacman, 0, 1)
        for enemy in game.enemies:
            enemy.children = enemy.ghost_children
            enemy.velocity = [v_x, 0, 0]
    if pacman.world_bounds.position[0] > 240:
        # done.
        state.game.state = get_scene(state, "main_menu")
        state.game.state.status = "start"

intro_run_idle():
