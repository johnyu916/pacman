from wafflecore.compute import (new_id, filename_type)
from wafflecore.thing import (thing_copy, thing_new, thing_blank, thing_read, thing_set_children)
from wafflecore.standard import copy_object
from enemy_jail import jail_enemy_new
from ai import get_navigation
from text import get_text
from dots_balls import (get_dots, get_balls, get_grid)
from task import task_new

() start(array argv, object state):
    # load geometries
    names = file_list_dir(state.geometries_dir)
    print(["starter geometry names", names])
    geometries = {}
    for filename in names:
        filepath = join([state.geometries_dir, filename], "/")
        (name, type) = filename_type(filename)
        if file_is_file(filepath) && type == "json":
            text = null
            file_read(filepath, text)
            geometry = {
                "vertices": array_float(from_json(text)),
                "id": new_id(state),
                "static": true
            }
            geometries{name} = geometry

    state.geometries = geometries
    # load things
    things = {}
    filenames = file_list_dir(state.things_dir)
    for filename in filenames:
        filepath = join([state.things_dir, filename], "/")
        (name, type) = filename_type(filename)
        if file_is_file(filepath) && type == "json":
            print(["reading thing from filename: ", filename])
            things{name} = thing_read(state, filename)

    for key in keys(things):
        thing = things{key}
        thing_set_children(thing, things)
    state.things = things


    # load animations
    names = file_list_dir(state.animations_dir)
    print(["start", names])
    animations = {}
    for filename in names:
        filepath = join([state.animations_dir, filename], "/")
        (name, type) = filename_type(filename)
        if file_is_file(filepath) && type == "json":
            text = null
            file_read(filepath, text)
            animation = from_json(text)
            animations{name} = animation
    state.animations = animations


    pacman = things.pacman
    game = state.game

    points = []
    point_names = ["green_200", "green_400", "green_800", "green_1600"]
    for name in point_names:
        point = thing_new(new_id(state), "NumberBubble", [0,-100, 0], [], [], geometries{name}, null)
        things{name} = point
        append(points, point)
    game.number_bubbles = points

    ready_text = get_text(state, "READY!", [254, 253, 60, 255])
    ready_text.position = [89, 0, 121]
    game.ready_text = ready_text

    game.pacman = pacman

    load_enemies(state)

    stage = things.stage
    stage.grid = get_grid()
    stage.navigation = get_navigation()
    game.stage = stage
    game.stage_white = things.white_stage

    jail = things.jail
    game.jail = jail
    enemy_jail = jail_enemy_new(state)
    enemy_jail.position = jail.position
    game.enemy_jail = enemy_jail

    # dots, balls, etc
    game.balls = get_balls(state)
    game.dots = get_dots(state)

    #ready = thing_load(state, "ready")
    intro = {}
    chars = get_text(state, "CHARACTERS", [221, 221, 221, 255])
    chars.position = [80, 0, 210]
    intro.chars = chars
    shadow_copy = thing_copy(game.shadow, things)
    name = join(["shadow", "head_eyes_right"], "_")
    shadow_copy.children[1].geometry = geometries{name}
    shadow_copy.position = [60, 0, 170]
    shadow_chars = get_text(state, "SHADOW", [217, 29, 5, 255])
    shadow_chars.position = [80, 0, 170]
    intro.shadow_copy = shadow_copy
    intro.shadow_chars = shadow_chars
    game.intro = intro

    main_menu = {}
    chars = get_text(state, "PUSH START BUTTON", [236, 182, 81, 255])
    chars.position = [80, 0, 120]
    main_menu.text = chars
    game.main_menu = main_menu

    player_ready = {}
    chars = get_text(state, "PLAYER ONE", [147, 254, 222, 255])
    chars.position = [78, 0, 169]
    player_ready.text = chars
    game.player_ready = player_ready

    game.eat_scores = [200, 400, 800, 1600]
    game.score_key = get_text(state, "1UP", [221, 221, 221, 255])
    game.score_key.position = [26, 0, 281]
    game.score_value = get_text(state, "00", [221, 221, 221, 255])
    game.score_value.position = [41, 0, 272]
    game.high_score_key = get_text(state, "HIGH SCORE", [221, 221, 221, 255])
    game.high_score_key.position = [73, 0, 281]
    game.high_score_value = get_text(state, "00", [221, 221, 221, 255])
    game.high_score_value.position = [121, 0, 272]

    game.life_icons = thing_blank(new_id(state), "LiveIcons")
    game.info = thing_blank(new_id(state), "Info")

    game.info.children = [game.score_key, game.score_value, game.high_score_key, game.high_score_value]

    game_over = {} 
    ready_text = get_text(state, "GAME OVER", [217, 29, 5, 255])
    ready_text.position = [89, 0, 121]
    game_over.text = ready_text
    game.game_over = game_over
    # prepare ready
    task = task_new(state, "root")
    state.tasks = [task]


() load_enemies(object state):
    #TODO: separate the eyes from the body in the geometry.
    # then just loop through 4 of them.
    # rename to enemy.
    things = state.things
    game = state.game
    for enemy_name in game.enemy_names:
        thing = copy_object(things.enemy)
        thing.id = new_id(state)
        thing.name = enemy_name
        for child in thing.children:
            print(["load_enemies", child.type])
            new_name = join([enemy_name, child.geometry_name], "_")
            child.name = new_name
            child.id = new_id(state)
            child.geometry_name = new_name
            child.geometry = state.geometries{child.geometry_name}
            things{new_name} = child
        game{enemy_name} = thing
        append(game.enemies, thing)

        thing.normal_children = thing.children

        children = []
        for name in game.ghost_children_names:
            child = things{name}
            new_child = copy_object(child)
            new_child.geometry = child.geometry
            append(children, new_child)
        thing.ghost_children = children
        children = []
        for name in game.white_ghost_children_names:
            child = things{name}
            new_child = copy_object(child)
            new_child.geometry = child.geometry
            append(children, new_child)
        thing.white_ghost_children = children
        thing.eyes = thing_copy(things.eyes, things)

    # animations.
    animations = state.animations
    enemy_legs = animations.enemy_legs
    ghost_legs = animations.ghost_legs
    ghost_blink_legs = animations.ghost_blink_legs
    ghost_blink_head = animations.ghost_blink_head
    for enemy_name in game.enemy_names:
        animation = copy_object(enemy_legs)
        for action in animation.actions:
            geometry_name = action.geometry_name
            new_geometry_name = join([enemy_name, geometry_name], "_")
            action.geometry_name = new_geometry_name
        animation_name = join([enemy_name, "legs"], "_")
        animations{animation_name} = animation

        animation = copy_object(ghost_legs)
        animation_name = join([enemy_name, "ghost_legs"], "_")
        animations{animation_name} = animation

        animation = copy_object(ghost_blink_legs)
        animation_name = join([enemy_name, "ghost_blink_legs"], "_")
        animations{animation_name} = animation

        animation = copy_object(ghost_blink_head)
        animation_name = join([enemy_name, "ghost_blink_head"], "_")
        animations{animation_name} = animation
