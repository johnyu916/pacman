from wafflecore.compute import (new_id)
from wafflecore.thing import (thing_new, thing_load, thing_blank)
from shared import get_game_state
from text import get_text
from dots_balls import (get_dots, get_balls)

() start(array argv, object state):
    # load pacman
    # load animations
    names = file_list_dir(state.animations_dir)
    print(["start", names])
    animations = {}
    for name in names:
        filepath = join([state.animations_dir, name], "/")
        if file_is_file(filepath):
            text = null
            file_read(filepath, text)
            animation = from_json(text)
            animations{name} = animation
    state.animations = animations

    names = file_list_dir(state.geometries_dir)
    print(["starter geometry names", names])
    geometries = {}
    for name in names:
        filepath = join([state.geometries_dir, name], "/")
        if file_is_file(filepath):
            text = null
            file_read(filepath, text)
            geometry = {
                "vertices": from_json(text),
                "id": new_id(state)
            }
            geometries{name} = geometry

    state.geometries = geometries

    names = file_list_dir(state.things_dir)
    for name in names:
        things_load(state)
    pacman = thing_load(state, "pacman")
    game = state.game
    ready_text = get_text(state, "READY!", [254, 253, 60, 255])
    ready_text.position = [89, 0, 121]
    game.ready_text = ready_text

    game.pacman = pacman
    #append(state.world.children, pacman)

    load_enemies(state)

    #append(state.world.children, shadow)

    print(["loading thing", name])
    stage = thing_load(state, "stage")
    game.stage = stage

    jail = thing_load(state, "jail")
    game.jail = jail
    game.materials = thing_blank(new_id(state), "Materials")
    game.materials.children = [stage]

    game.items = thing_blank(new_id(state), "Items")
    balls = get_balls(state)
    dots = get_dots(state)
    game.items.children = [dots, balls]
    # dots, balls, etc

    #ready = thing_load(state, "ready")
    intro_state = get_game_state(state, "intro")
    chars = get_text(state, "CHARACTERS", [221, 221, 221, 255])
    chars.position = [80, 0, 210]
    shadow = get_text(state, "SHADOW", [217, 29, 5, 255])
    shadow.position = [80, 0, 170]
    intro_state.texts = [chars, shadow]

    main_menu_state = get_game_state(state, "main_menu")
    chars = get_text(state, "PUSH START BUTTON", [236, 182, 81, 255])
    chars.position = [80, 0, 120]
    main_menu_state.texts = [chars]

    player_ready_state = get_game_state(state, "player_ready")
    chars = get_text(state, "PLAYER ONE", [147, 254, 222, 255])
    chars.position = [78, 0, 169]
    player_ready_state.text = chars

    game.score_key = get_text(state, "1UP", [221, 221, 221, 255])
    game.score_key.position = [26, 0, 281]
    game.score_value = get_text(state, "00", [221, 221, 221, 255])
    game.score_value.position = [41, 0, 272]
    game.high_score_key = get_text(state, "HIGH SCORE", [221, 221, 221, 255])
    game.high_score_key.position = [73, 0, 281]
    game.high_score_value = get_text(state, "00", [221, 221, 221, 255])
    game.high_score_value.position = [121, 0, 272]

    game.life_icons = thing_blank(new_id(state), "LiveIcons")
    game.info = thing_blank(new_id(state), "Info")

    game.info.children = [game.score_key, game.score_value, game.high_score_key, game.high_score_value]

    ready_state = get_game_state(state, "ready")

    # prepare ready
    state.game.state = get_game_state(state, state.game.init_state_name)
    #print(["starter", state.game.state])
    state.game.state.status = "start"

    game_over_state = get_game_state(state, "game_over")
    ready_text = get_text(state, "GAME OVER", [217, 29, 5, 255])
    ready_text.position = [89, 0, 121]
    game_over_state.text = ready_text

() load_enemies(object state):
    #TODO: separate the eyes from the body in the geometry.
    # then just loop through 4 of them.
    # rename to enemy.
    game = state.game
    for enemy_name in game.enemy_names:
        thing = thing_load(state, "enemy")
        for child in thing.children:
            new_geometry_names = []
            for geometry_name in child.geometry_names:
                new_name = join([enemy_name, geometry_name], "_")
                append(new_geometry_names, new_name)
            child.geometry_names = new_geometry_names
            child.geometry = state.geometries{child.geometry_names[0]}
        game{enemy_name} = thing
        append(game.enemies, thing)
