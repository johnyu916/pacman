from collisions import (collide_characters, collisions, touching_all, overlap_bounds_thing, position_delta)
from text import get_text
from keyboard import keyboard_idle
from shared import get_game_state
from wafflecore.animation import animate
from wafflecore.thing import (thing_new, thing_set_world_bounds)
from ai import ai_idle
from wafflecore.compute import (new_id, matrix_placement, cuboid_transformed, matrix_identity, is_overlap_cuboids, sum_arrays)


() intro_start(object state):
    intro = state.game.state
    intro.time_start = state.now
    state.world.children = [intro.texts[0]]
    intro.status = "idle"

() intro_idle(object state):
    intro = state.game.state
    elapsed = state.now - intro.time_start
    if elapsed > 2.0:
        print(["set game state to intro_run"])
        state.game.state = get_game_state(state, "intro_run")
        # animate
        state.game.state.status = "start"
    elif elapsed > 1.0:
        state.world.children = [intro.texts[0], intro.texts[1]]

() intro_run_start(object state):
    game = state.game
    game.ball = thing_new(new_id(state), "Ball", [0,0,0], [], [], state.geometries.ball, null)
    state.world.children = [game.pacman, game.ball]
    z = 117
    v_x = -100
    game.ball.position = [33.0, 0.0, 120]
    game.pacman.position = [224.0, 0.0, z]
    game.pacman.velocity = [v_x, 0, 0]
    x = 250
    for enemy in game.enemies:
        enemy.position = [x, 0.0, z]
        enemy.velocity = [v_x, 0, 0]
        x+=16
    extend(state.world.children, game.enemies)
    state.game.state.status = "idle"

() intro_run_idle(object state):
    game = state.game
    pacman = game.pacman

    delta = state.delta
    distance_delta = position_delta(pacman, delta)
    #print(["distance delta", distance_delta])
    pacman.position = sum_arrays(pacman.position, distance_delta)
    for enemy in game.enemies:
        enemy.position = sum_arrays(enemy.position, distance_delta)

    v_x = 100
    if pacman.position[0] < 41:
        pacman.velocity = [v_x, 0, 0]
        enemy.children = game.ghost_children
        for enemy in game.enemies:
            enemy.velocity = [v_x, 0, 0]
    if pacman.position[0] > 224:
        # done.
        state.game.state = get_game_state(state, "main_menu")
        state.game.state.status = "start"


() main_menu_start(object state):
    main_menu = state.game.state
    state.world.children = main_menu.texts
    main_menu.status = "idle"

() main_menu_idle(object state):
    keys_state = state.keyboard.keys_state
    for key in keys(keys_state):
        key_state = keys_state{key}
        if key_state == "KEY_DOWN":
            if key == "q":
                exit()
            elif key == "s":
                state.game.state = get_game_state(state, "player_ready")
                state.game.state.status = "start"


() player_ready_start(object state):
    game = state.game
    game.lives = 3
    game.score = 0
    game.high_score = 0
    game.life_icons.children = []
    x = 19
    for i in range(game.lives - 1):
        life_icon = thing_new(new_id(state), "LiveIcon", [x, 0, 3], [], [], state.geometries{"pacman_2"}, null)
        append(game.life_icons.children, life_icon)
        x += 16
    player_ready = state.game.state
    player_ready.time_start = state.now
    game.info.children = [game.score_key, game.score_value, game.high_score_key, game.high_score_value, game.ready_text, player_ready.text, game.life_icons]
    state.world.children = [game.info, game.stage, game.jail, game.items, game.pacman]
    extend(state.world.children, game.enemies)
    player_ready.status = "idle"


() player_ready_idle(object state):
    game = state.game
    player_ready = state.game.state
    elapsed = state.now - player_ready.time_start
    if elapsed > 1.0:
        remove_thing(game.info.children, player_ready.text.id)
        # start playing
        game.state = get_game_state(state, "ready")
        game.state.status = "start"

() ready_start(object state):
    game = state.game
    ready = game.state
    remove_thing(game.info.children, game.ready_text.id)
    append(game.info.children, game.ready_text)

    ready.time_start = state.now
    ready.status = "idle"
    pacman = game.pacman
    pacman.geometry = state.geometries{"pacman_0"}
    pacman.position = [106, 0, 70]
    pacman.velocity = [0, 0, 0]
    pacman.rotates = []
    game.shadow.position = [105, 0, 165]
    game.shadow.jail_position = [105, 0, 141]
    game.shadow.state = "normal"
    game.speedy.jail_position = [105, 0, 141]
    game.speedy.position = [105, 0, 141]
    game.speedy.state = "jail_exit"
    game.bashful.position = [89, 0, 141]
    game.bashful.jail_position = [89, 0, 141]
    game.bashful.state = "up_down"
    game.bashful.up_down_time = 4
    game.pokey.position = [121, 0, 141]
    game.pokey.jail_position = [121, 0, 141]
    game.pokey.state = "up_down"
    game.pokey.up_down_time = 10

    # cache the world bounds
    things = [game.jail, game.enemy_jail, game.stage, game.pacman, game.items]
    extend(things, game.enemies)
    cache_world_bounds(state, things)

() cache_world_bounds(object state, array things):
    identity = matrix_identity()
    for thing in things:
        thing_set_world_bounds(thing, identity)
    #print(["ready_start", state.game])

() ready_idle(object state):
    game = state.game
    ready = game.state
    elapsed = state.now - ready.time_start
    if elapsed > 1.0:
        game.bashful.up_down_start = state.now
        game.pokey.up_down_start = state.now
        remove_thing(game.info.children, game.ready_text.id)
        # start playing
        state.game.state = get_game_state(state, "playing")
        state.game.state.status = "start"

() dying_start(object state):
    dying = state.game.state
    dying.time_start = state.now
    dying.status = "idle"

() dying_idle(object state):
    game = state.game
    pacman = game.pacman
    dying = game.state
    elapsed = state.now - dying.time_start
    if elapsed > 1.5:
        # change state
        lives = game.lives
        lives -= 1
        game.lives = lives

        if lives > 0:
            pop(game.life_icons.children)
            state.game.state = get_game_state(state, "ready")
            state.game.state.status = "start"
        else:
            state.game.state = get_game_state(state, "game_over")
            state.game.state.status = "start"
    else:
        #print(["dying_idle animating"])
        animate(state.animations.pacman_die, state.things, state.geometries, elapsed)

() game_over_start(object state):
    game_over = state.game.state
    game_over.time_start = state.now
    state.world.children = [game_over.text]
    game_over.status = "idle"
    # different keyboard handler

() game_over_idle(object state):
    game_over = state.game.state
    elapsed = state.now - game_over.time_start
    if elapsed > 1.0:
        state.game.state = get_game_state(state, "main_menu")
        state.game.state.status = "start"


() playing_start(object state):
    # dots
    state.game.state.status = "idle"

() playing_idle(object state):
    #print("playing_idlestart")
    #collisions(state)
    # game specific touching
    #one = time()
    collide_characters(state)
    #touching_all(state)
    #two = time()

    stop = game_logic(state)
    #three = time()
    if stop:
        return
    keyboard_idle(state)
    ai_idle(state)
    #four = time()
    #print("playing_idleend")
    #print(["pacman velocity", state.pacman.velocity])
    #print(["playing_idle", one, two, three, four])

() won_start(object state):
    won = state.game.state
    won.status = "idle"
    won.time_start = state.now

() won_idle(object state):
    if (state.now - won.time_start) > 2:
        state.game.state = get_game_state(state, "victory_dance")
        state.game.state.status = "start"
        return
    animate(state.animations.blink_stage, state.things, state.geometries, elapsed)

() victory_dance_start(object state):
    game = state.game
    state.world.children = [game.pacman, game.shadow]

    z = 117
    v_x = -100
    shadow.position = [250, 0, z]
    shadow.velocity = [v_x, 0, 0]
    pacman.position = [224.0, 0.0, z]
    pacman.velocity = [v_x, 0, 0]
    state.game.state.status = "idle"

() victory_dance_idle(object state):
    pacman = game.pacman
    distance_delta = position_delta(pacman, delta)
    pacman.position = sum_arrays(pacman.position, distance_delta)


    v_x = 100
    if pacman.position[0] < -30:
        pacman.velocity = [v_x, 0, 0]
        shadow.velocity = [v_x, 0, 0]
    if pacman.position[0] > 224:
        # done.
        state.game.state = get_game_state(state, "main_menu")
        state.game.state.status = "start"

(bool yes) is_win(array items):
    for item in items:
        if length(item.children) > 0:
            yes = false
            return

# two objects collided. specifically, one ran into two. what to do?
#() handle_collision(object one, object two):
(bool stop) game_logic(object state):
    #print(["game_logic start"])
    pacman = state.game.pacman
    game = state.game
    for touch in pacman.touching:
        thing = touch.thing
        if thing.type == "Enemy":
            if thing.state == "normal":
                game.state = get_game_state(state, "dying")
                game.state.status = "start"
                stop = true
                return
            elif thing.state == "blue" || thing.state == "blink":
                game.score += 100
                thing.state = "eyes"
                thing.children = [game.eyes]

    pacman_bounds = pacman.world_bounds
    #print(["game_logic checking overlapping start"])
    round = overlap_bounds_thing(pacman_bounds.position, pacman_bounds.size, pacman_bounds.points[6], game.items)
    #print(["game_logic checking overlapping end"])
    if round:
        if round.type == "Ball":
            game.score += 50
            set_score_value(state)
            # TODO: don't have to go through each and every one. go through tree.
            remove_thing(game.items.children[1].children, round.id)

            if is_win(game.items.children):
                game.state = get_game_state(state, "won")
                game.state.status = "start"
            # turn enemy status to blue
            for enemy in game.enemies:
                enemy.normal_children = enemy.children
                enemy.children = game.ghost_children
                enemy.state = "blue"
            game.ghost_time_start = state.now
        elif round.type == "Dot":
            #print(["hit dot start"])
            game.score += 10
            set_score_value(state)
            # TODO: don't have to go through each and every one. go through tree.
            remove_thing(game.items.children[0].children, round.id)
            if is_win(game.items.children):
                game.state = get_game_state(state, "won")
                game.state.status = "start"
            #print(["hit dot end"])

() set_score_value(object state):
    game = state.game
    text = integer_string(game.score)
    score_value = get_text(state, text, [221, 221, 221, 255])
    game.score_value.children = score_value.children
    x = 57
    game.score_value.position[0] = 54 - 8*length(text)


(object removed_thing) remove_thing(array things, number thing_id):
    removed_thing = null
    for thing in things:
        if thing.id == thing_id:
            remove(things, thing)
            removed_thing = thing
            return
        child_removed = remove_thing(thing.children, thing_id)
        if child_removed != null:
            removed_thing = child_removed
            return

() do_friction(object state):
    # do friction stuff later.
    pacman = state.game.pacman
    pacman_id = pacman.id
    matrix = matrix_placement(pacman.position, pacman.rotates)
    bounds = pacman.bounds
    (new_point, new_size) = cuboid_transformed(matrix, bounds.position, bounds.size)

    for child in state.world.children:
        if child.id != pacman_id:
            matrix = matrix_placement(child.position, child.rotates)
            bounds = child.bounds
            (child_point, child_size) = cuboid_transformed(matrix, bounds.position, bounds.size)
            # see if they touch. axis vector
            (axis, sign) = face_overlap(new_point, new_size, child_point, child_size)
            if axis == null:
                continue

            friction_mag = 0
            if sign == 0:
                if thing.force[axis] < 0:
                    friction_mag = coef * thing.force[axis]
            else:
                if thing.force[axis] > 0:
                    friction_mag = coef * thing.force[axis]

            friction = array_scaled(vector_unit(thing.velocity), friction_mag)
            # decrease the force in that direction up to 0.
            thing.force = sum_arrays(thing.force, friction)

