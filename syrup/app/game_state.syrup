from collisions import (collide_characters, collisions, touching_all, overlap_bounds_thing, position_delta, bump_thing)
from text import get_text
from keyboard import (keyboard_idle, place_pacman)
from wafflecore.animation import (animate, animation_task)
from wafflecore.standard import copy_object
from wafflecore.thing import (thing_new, thing_set_world_bounds, thing_set_position, thing_set_position_y)
from ai import (ai_idle, move_velocity, get_enemy_legs, get_ghost_children)
from wafflecore.compute import (new_id, matrix_placement, cuboid_transformed, matrix_identity, is_overlap_cuboids, sum_arrays)
from task import (task_exit, task_new_exec, task_new_exec_wait)
from shared import (on_eat, on_eat_done)

(array indices) indices_point(number x, number z):
    x_off = x - 5
    z_off = z - 21
    x_idx = x_off / 8
    x_mod = x_off % 8
    y_idx = z_off / 8
    y_mod = z_off % 8
    append(indices, [x_idx, y_idx])

    # also append adjacent
    if x_mod > 1 && x_idx < 25:
        append(indices, [x_idx + 1, y_idx])
    if y_mod > 1 && y_idx < 28:
        append(indices, [x_idx, y_idx + 1])

() main_menu(object state, object task):
    if task.step == 0:
        print("main_menu_start")
        main_menu = state.game.main_menu
        state.world.children = [main_menu.text]
        task.step = 1
    elif task.step == 1:
        keys_state = state.keyboard.keys_state
        for key in keys(keys_state):
            key_state = keys_state{key}
            if key_state == "KEY_DOWN":
                if key == "q":
                    exit()
                elif key == "s":
                    task_exit(task, {})


() player_ready(object state, object task):
    if task.step == 0:
        player_ready_start(state)
        task.step = 1
    if task.step == 1:
        done = player_ready_idle(state, task)
        if done:
            task_exit(task, {})

() player_ready_start(object state):
    game = state.game
    game.lives = 3
    game.score = 0
    game.high_score = 0
    game.life_icons.children = []
    x = 19
    for i in range(game.lives - 1):
        life_icon = thing_new(new_id(state), "LiveIcon", [x, 0, 3], [], [], state.geometries{"pacman_2"}, null)
        append(game.life_icons.children, life_icon)
        x += 16
    player_ready = state.game.player_ready
    game.info.children = [game.score_key, game.score_value, game.high_score_key, game.high_score_value, game.ready_text, player_ready.text, game.life_icons]
    state.world.children = [game.info, game.stage, game.jail, game.pacman, game.balls, game.dots]
    extend(state.world.children, game.enemies)
    #extend(state.world.children, game.balls)
    #extend(state.world.children, game.dots)
    for enemy in game.enemies:
        enemy.children = enemy.normal_children


(bool done) player_ready_idle(object state, object task):
    game = state.game
    player_ready = state.game.player_ready
    elapsed = state.now - task.time_start
    if elapsed > 1.0:
        remove_thing(game.info.children, player_ready.text.id)
        done = true
        # start playing

() ready(object state, object task):
    if task.step == 0:
        ready_start(state)
        task.step = 1
    elif task.step == 1:
        game = state.game
        elapsed = state.now - task.time_start
        if elapsed > 1.0:
            game.bashful.up_down_start = state.now
            game.pokey.up_down_start = state.now
            remove_thing(game.info.children, game.ready_text.id)
            # start playing
            task_exit(task, {})

() ready_start(object state):
    game = state.game
    remove_thing(game.info.children, game.ready_text.id)
    append(game.info.children, game.ready_text)

    pacman = game.pacman
    pacman.geometry = state.geometries{"pacman_0"}
    pacman.position = [106, 0, 70]
    pacman.velocity = [0, 0, 0]
    pacman.rotates = []
    game.shadow.position = [105, 0, 165]
    game.shadow.jail_position = [105, 0, 141]
    game.shadow.state = "normal"
    game.speedy.jail_position = [105, 0, 141]
    game.speedy.position = [105, 0, 141]
    game.speedy.state = "jail_exit"
    game.bashful.position = [89, 0, 141]
    game.bashful.jail_position = [89, 0, 141]
    game.bashful.state = "up_down"
    game.bashful.up_down_time = 4
    game.pokey.position = [121, 0, 141]
    game.pokey.jail_position = [121, 0, 141]
    game.pokey.state = "up_down"
    game.pokey.up_down_time = 10

    for enemy in game.enemies:
        enemy.velocity = [0, 0, 0]
        enemy.force = [0, 0, 0]

    # cache the world bounds
    things = [game.jail, game.enemy_jail, game.stage, game.pacman]
    extend(things, game.enemies)
    cache_world_bounds(state, things)

() cache_world_bounds(object state, array things):
    identity = matrix_identity()
    for thing in things:
        thing_set_world_bounds(thing, identity)
    #print(["ready_start", state.game])


() dying(object state, object task):
    game = state.game
    pacman = game.pacman
    if task.step == 0:
        animation = copy_object(state.animations.pacman_die)
        animation.time_start = state.now
        animation.thing = pacman
        task.animations.pacman_die = animation
        task.step = 1
    else:
        elapsed = state.now - task.time_start
        if elapsed > 1.5:
            # change state
            lives = game.lives
            lives -= 1
            game.lives = lives

            if lives > 0:
                pop(game.life_icons.children)
                task_exit(task, {"next":"ready"})
            else:
                task_exit(task, {"next":"game_over"})
        else:
            #print(["dying_idle animating"])
            animate(task.animations.pacman_die, state.things, state.geometries, state.now)

() game_over(object state, object task):
    if task.step == 0:
        game_over = state.game.game_over
        state.world.children = [game_over.text]
        task.step = 1
    else:
        elapsed = state.now - task.time_start
        if elapsed > 1.0:
            task_exit(task, {})


() playing(object state, object task):
    if task.step == 0:
        #print("playing_idlestart")
        #collisions(state)
        # game specific touching
        #one = time()
        task.playing_blink = task_new_exec(state, "playing_blink")
        task.playing_pacman = task_new_exec_wait(state, task, "playing_pacman")
        task.step = 1
    elif task.step == 1:
        # stop the other guy too
        task_exit(task.playing_blink, {})
        task_exit(task, task.playing_pacman.result)

() playing_blink(object state, object task):
    # just blink
    #animate(state.one_up)
    #animate(state.balls)
    return

() playing_pacman(object state, object task):
    step = task.step
    game = state.game
    if step == 0:
        #setup
        task.number_eaten = 0
        task.animations.pacman = animation_task(state.animations.pacman, game.pacman, state.now)
        for enemy in game.enemies:
            animation_name = join([enemy.name, "legs"], "_")
            legs = get_enemy_legs(enemy)
            task.animations{animation_name} = animation_task(state.animations{animation_name}, legs, state.now)
            legs = enemy.ghost_children[1]
            animation_name = join([enemy.name, "ghost_legs"], "_")
            task.animations{animation_name} = animation_task(state.animations{animation_name}, legs, state.now)

            animation_name = join([enemy.name, "ghost_blink_legs"], "_")
            task.animations{animation_name} = animation_task(state.animations{animation_name}, legs, state.now)

            head = enemy.ghost_children[0]
            animation_name = join([enemy.name, "ghost_blink_head"], "_")
            task.animations{animation_name} = animation_task(state.animations{animation_name}, head, state.now)
        task.step = 1
    elif step == 1:
        collide_characters(state)
        #touching_all(state)
        #two = time()

        next = game_logic(state, task)
        #three = time()
        if next == "stop":
            return
        elif next == "pause":
            game.guys_paused_start = state.now
            task.step = 2
            return
        keyboard_idle(state, task)
        ai_idle(state, task)
        #four = time()
        #print("playing_idleend")
        #print(["pacman velocity", state.pacman.velocity])
        #print(["playing_idle", one, two, three, four])
    elif step == 2:
        done = playing_pacman_pause(state)
        if done == true:
            on_eat_done(task, game)
            thing_set_position_y(task.eaten, 0)
            task.step = 1

(bool done) playing_pacman_pause(object state):
    game = state.game
    if (state.now - game.guys_paused_start) > 1.0:
        pacman = game.pacman
        thing_set_position_y(pacman, 0.0)
        thing_set_world_bounds(pacman, matrix_identity())
        game.number_bubbles[0].position[1] = -100.0
        done = true

() won(object state, object task):
    if (state.now - task.time_start) > 2:
        task_exit(task, {})
        return
    animate(state.animations.blink_stage, state.things, state.geometries, elapsed)

() victory_dance(object state, object task):
    if task.step == 0:
        game = state.game
        state.world.children = [game.pacman, game.shadow]

        z = 117
        v_x = -100
        shadow.position = [250, 0, z]
        shadow.velocity = [v_x, 0, 0]
        pacman.position = [224.0, 0.0, z]
        pacman.velocity = [v_x, 0, 0]
        state.game.state.status = "idle"
    elif task.step == 1:
        victory_dance_idle(state)

() victory_dance_idle(object state):
    pacman = game.pacman
    distance_delta = position_delta(pacman, delta)
    pacman.position = sum_arrays(pacman.position, distance_delta)


    v_x = 100
    if pacman.position[0] < -30:
        pacman.velocity = [v_x, 0, 0]
        shadow.velocity = [v_x, 0, 0]
    if pacman.position[0] > 224:
        # done.
        task_exit(task, {})


# two objects collided. specifically, one ran into two. what to do?
#() handle_collision(object one, object two):
(string next) game_logic(object state, object task):
    #print(["game_logic start"])
    pacman = state.game.pacman
    game = state.game
    #for touch in pacman.touching:
    for touch in pacman.collisions:
        thing = touch.thing
        if thing.type == "Enemy":
            if thing.state == "normal":
                task_exit(task, {"next": "dying"})
                next = "stop"
                return
            elif thing.state == "blue" || thing.state == "blink":
                game.score += game.eat_scores[task.number_eaten]
                thing.state = "eyes"
                thing.eye_state = "start"
                thing.children = [thing.eyes]
                print(["ate something", thing.position, thing,velocity])
                on_eat(task, game, thing)
                next = "pause"
                return

    # hit balls and dots?
    pacman_bounds = pacman.world_bounds
    indices = indices_point(pacman_bounds.position[0], pacman_bounds.position[2])
    #print(["game_logic indices", indices])
    grid = game.stage.grid
    for index in indices:
        space = grid[index[0]][index[1]]
        if space != null:
            if space.type == "Ball":
                remove_item(grid, index[0], index[1], game.balls)
                game.score += 50
                set_score_value(state)
                for enemy in game.enemies:
                    enemy.children = enemy.ghost_children
                    enemy.state = "blue"
                game.ghost_time_start = state.now
            elif space.type == "Dot":
                remove_item(grid, index[0], index[1], game.dots)
                game.score += 10
                set_score_value(state)


        #print(["hit dot start"])
        #print(["hit dot end"])

    if game.balls.count == 0 && game.dots.count == 0:
        task_exit(task, {"next": "won"})
        next = "stop"

() remove_item(array grid, number x, number y, object balls):
    item = grid[x][y]
    offset = item.offset
    vertices = balls.geometry.vertices
    length = item.length
    for i in range(length):
        vertices[i + offset][2] = -100
    grid[x][y] = null
    balls.count -= 1


() set_score_value(object state):
    game = state.game
    text = integer_string(game.score)
    score_value = get_text(state, text, [221, 221, 221, 255])
    game.score_value.children = score_value.children
    x = 57
    game.score_value.position[0] = 54 - 8*length(text)


(object removed_thing) remove_thing(array things, number thing_id):
    removed_thing = null
    for thing in things:
        if thing.id == thing_id:
            remove(things, thing)
            removed_thing = thing
            return
        child_removed = remove_thing(thing.children, thing_id)
        if child_removed != null:
            removed_thing = child_removed
            return

() do_friction(object state):
    # do friction stuff later.
    pacman = state.game.pacman
    pacman_id = pacman.id
    matrix = matrix_placement(pacman.position, pacman.rotates)
    bounds = pacman.bounds
    (new_point, new_size) = cuboid_transformed(matrix, bounds.position, bounds.size)

    for child in state.world.children:
        if child.id != pacman_id:
            matrix = matrix_placement(child.position, child.rotates)
            bounds = child.bounds
            (child_point, child_size) = cuboid_transformed(matrix, bounds.position, bounds.size)
            # see if they touch. axis vector
            (axis, sign) = face_overlap(new_point, new_size, child_point, child_size)
            if axis == null:
                continue

            friction_mag = 0
            if sign == 0:
                if thing.force[axis] < 0:
                    friction_mag = coef * thing.force[axis]
            else:
                if thing.force[axis] > 0:
                    friction_mag = coef * thing.force[axis]

            friction = array_scaled(vector_unit(thing.velocity), friction_mag)
            # decrease the force in that direction up to 0.
            thing.force = sum_arrays(thing.force, friction)

