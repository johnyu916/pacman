from wafflecore.compute import (subtract_arrays)
from wafflecore.animation import animate

(object legs, object head) get_ghost_children(object ghost):
    for child in ghost.children:
        if child.type == "GhostLegs":
            legs = child
        else:
            head = child

(object legs) get_enemy_legs(object shadow):
    for child in shadow.children:
        if child.type == "EnemyLegs":
            legs = child

(object eyes) get_enemy_eyes(object shadow):
    for child in shadow.children:
        if child.type == "EnemyEyes":
            eyes = child

() animate_blink(object state, object ghost):
    (legs, head) = get_ghost_children(ghost)
    animate(state.animations.ghost_blink_legs, legs, state.geometries, state.now)
    animate(state.animations.ghost_blink_head, head, state.geometries, state.now)

() animate_ghost_legs(object state, object ghost):
    animation = state.animations.ghost_legs
    (legs, head) = get_ghost_children(ghost)
    #print(["animate_shadow", shadow_legs.type, state.now])
    animate(animation, legs, state.geometries, state.now)

() animate_shadow(object state, object enemy):
    name = join([enemy.name, "legs"], "_")
    animation = state.animations{name}
    shadow_legs = get_enemy_legs(enemy)
    #print(["animate_shadow", shadow_legs.type, state.now])
    animate(animation, shadow_legs, state.geometries, state.now)

() ai_idle(object state):
    for enemy in state.game.enemies:
        enemy_idle(state, enemy)

() enemy_idle(object state, object shadow):
    #print(["ai_idle", shadow.state, shadow.position, shadow.last_position])
    # try to move
    enemy = shadow
    delta = subtract_arrays(shadow.position, shadow.last_position)
    shadow.last_position = shadow.position
    my_state = shadow.state
    game = state.game

    # move up and down
    if my_state  == "up_down":
        if state.now - enemy.up_down_start > enemy.up_down_time:
            enemy.state = "jail_center"
            return
        if delta == [0.0, 0.0, 0.0]:
            plus = shadow.input_velocity
            minus = -1*plus
            if enemy.position[2] == 136.0:
                move_velocity(state, enemy, [0, 0, plus])
            else:
                move_velocity(state, enemy, [0, 0, minus])
    # move toward jail center
    elif my_state == "jail_center":
        plus = shadow.input_velocity
        minus = -1*plus
        if enemy.position[0] < 104:
            # move right
            move_velocity(state, enemy, [plus, 0, 0])
        elif enemy.position[0] > 106:
            move_velocity(state, enemy, [minus, 0, 0])
        else:
            enemy.velocity = [0,0,0]
            enemy.position[0] = 105
            enemy.state = "jail_exit"
    # exit the jail
    elif my_state == "jail_exit":
        plus = shadow.input_velocity
        if enemy.position[2] < 165:
            move_velocity(state, enemy, [0, 0, plus])
        else:
            enemy.state = "normal"
    # move slowly
    elif my_state == "blue":
        move_blue(state, delta, enemy)
        if (state.now - game.ghost_time_start) > game.ghost_blink:
            enemy.state = "blink"
    # blink between blue and white
    elif my_state == "blink":
        move_blue(state, delta, enemy)
        if (state.now - game.ghost_time_start) > game.ghost_duration:
            enemy.children = enemy.normal_children
            enemy.state = "normal"
        else:
            animate_blink(state, enemy)
    # move around
    elif my_state == "normal":
        move_normal(state, delta, enemy)
    # move eyes toward jail
    elif my_state == "eyes":
        if is_close_vector_3(enemy.position, enemy.jail_position):
            enemy.children = enemy.normal_children
            enemy.state = "jail_center"
        move_eyes()

() move_eyes(object state, array delta, object enemy):
    plus = enemy.input_velocity/2.0
    minus = -1*plus

    # possible directions
    directions = [
        [-1, 0, 0],
        [1, 0, 0],
        [0, 0, -1],
        [0, 0, 1]
    ]

    allowed = []
    # direction we want to go
    vector = subtract_arrays(enemy.jail_position, enemy.position)
    vectors = vectors_component(vector)

    for direction in directions:
        (direction_a, direction_s) = axis_sign_vector(direction)
        blocked = false
        for touch in enemy.touching:
            for normal in touch.normals:
                (normal_a, normal_s) = axis_sign_vector(normal)
                if normal_a == direction_a && normal_s == direction_s:
                    blocked = true
                    break
            if blocked:
                break
        if blocked == false:
            append(allowed, direction)

    next_direction = null
    bad_directions = []
    for direction in allowed:
        (direction_a, direction_s) = axis_sign_vector(direction)
        for vector in vectors:
            (axis, sign) = axis_sign_vector(vector)
            if axis == direction_a && sign == direction_s:
                next_direction = direction
                break
        if next_direction == null:
            append(bad_directions, direction)
        else:
            break
    if next_direction == null:
        next_direction = bad_directions[0]

    velocity = array_scaled(next_direction, enemy.input_velocity)
    if velocity[0] < 0.0:
        enemy.children[0].geometry = geometries.eyes_left
    elif velocity[0] > 0.0:
        enemy.children[0].geometry = geometries.eyes_right
    elif velocity [1] > 0.0:
        enem.children[0].geometry = geometries.eyes_down
    elif velocity[1] < 0.0:
        enemy.children[0].geometry = geometries.eyes_up
    enemy.velocity = velocity

() move_blue(object state, array delta, object enemy):
    plus = enemy.input_velocity/2.0
    minus = -1*plus
    if delta == [0.0, 0.0, 0.0]:
        velocities = [[minus,0,0], [plus,0,0],[0,0,minus],[0,0,plus]]
        value = random()
        if value < 0.25:
            enemy.velocity = velocities[0]
        elif value < 0.50:
            enemy.velocity = velocities[1]
        elif value < 0.75:
            enemy.velocity = velocities[2]
        else:
            enemy.velocity = velocities[3]
    animate_ghost_legs(state, enemy)


# assume speed is > 0 in some direction
() move_velocity(object state, object enemy, array velocity):
    geometries = state.geometries
    enemy_eyes = get_enemy_eyes(enemy)
    enemy.velocity = velocity
    if velocity[0] < 0.0:
        geometry_name = join([enemy.name, "head_eyes_left"], "_")
        enemy_eyes.geometry = geometries{geometry_name}
    elif velocity[0] > 0.0:
        geometry_name = join([enemy.name, "head_eyes_right"], "_")
        enemy_eyes.geometry = geometries{geometry_name}
    elif velocity [1] > 0.0:
        geometry_name = join([enemy.name, "head_eyes_down"], "_")
        enemy_eyes.geometry = geometries{geometry_name}
    elif velocity[1] < 0.0:
        geometry_name = join([enemy.name, "head_eyes_up"], "_")
        enemy_eyes.geometry = geometries{geometry_name}
    animate_shadow(state, enemy)


() move_normal(object state, array delta, object enemy):
    if delta == [0.0, 0.0, 0.0]:
        plus = enemy.input_velocity
        minus = -1*plus
        velocities = [[minus,0,0], [plus,0,0],[0,0,minus],[0,0,plus]]
        value = random()
        if value < 0.25:
            move_velocity(state, enemy, velocities[0])
        elif value < 0.50:
            move_velocity(state, enemy, velocities[1])
        elif value < 0.75:
            move_velocity(state, enemy, velocities[2])
        else:
            move_velocity(state, enemy, velocities[3])


() change_state(object state, object enemy, string enemy_state):
    if enemy_state == "blue":
        enemy.blue_time = state.now
        enemy.state = "blue"
    elif enemy_state == "eyes":
        enemy.state = "eyes"
        # change geometry
        #enemy.geometry
