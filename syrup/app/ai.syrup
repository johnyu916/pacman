from wafflecore.compute import (vectors_component, axis_sign_vector, array_scaled, subtract_arrays, is_close_vector_3)
from wafflecore.animation import animate

(object legs, object head) get_ghost_children(object ghost):
    for child in ghost.children:
        if child.type == "GhostLegs":
            legs = child
        else:
            head = child

(object legs) get_enemy_legs(object shadow):
    for child in shadow.children:
        if child.type == "EnemyLegs":
            legs = child

(object eyes) get_enemy_eyes(object shadow):
    for child in shadow.children:
        if child.type == "EnemyEyes":
            eyes = child

() animate_blink(object state, object task, object enemy):
    #(legs, head) = get_ghost_children(ghost)
    animation_name = join([enemy.name, "ghost_blink_legs"], "_")
    animate(task.animations{animation_name}, state.things, state.geometries, state.now)
    animation_name = join([enemy.name, "ghost_blink_head"], "_")
    animate(task.animations{animation_name}, state.things, state.geometries, state.now)

() animate_ghost_legs(object state, object task, object enemy):
    animation_name = join([enemy.name, "ghost_legs"], "_")
    animation = task.animations{animation_name}
    #(legs, head) = get_ghost_children(ghost)
    #print(["animate_shadow", shadow_legs.type, state.now])
    animate(animation, state.things, state.geometries, state.now)

() animate_shadow(object state):
    name = join([enemy.name, "legs"], "_")
    animation = task.animations{name}
    #shadow_legs = get_enemy_legs(enemy)
    #print(["animate_shadow", shadow_legs.type, state.now])
    animate(animation, state.things, state.geometries, state.now)

() ai_idle(object state, object task):
    for enemy in state.game.enemies:
        enemy_idle(state, task, enemy)

() enemy_idle(object state, object task, object shadow):
    #print(["ai_idle", shadow.state, shadow.position, shadow.last_position])
    # try to move
    enemy = shadow
    delta = subtract_arrays(shadow.position, shadow.last_position)
    shadow.last_position = shadow.position
    my_state = shadow.state
    game = state.game

    # move up and down
    if my_state  == "up_down":
        print(["up_down p v", enemy.name, enemy.position, enemy.velocity])
        if state.now - enemy.up_down_start > enemy.up_down_time:
            enemy.state = "jail_center"
            return
        if delta == [0.0, 0.0, 0.0]:
            plus = shadow.input_velocity
            minus = -1*plus
            if enemy.position[2] == 136.0:
                move_velocity(state, task, enemy, [0, 0, plus])
            else:
                move_velocity(state, task, enemy, [0, 0, minus])
    # move toward jail center
    elif my_state == "jail_center":
        plus = shadow.input_velocity
        minus = -1*plus
        if enemy.position[0] < 104:
            # move right
            move_velocity(state, task, enemy, [plus, 0, 0])
        elif enemy.position[0] > 106:
            move_velocity(state, task, enemy, [minus, 0, 0])
        else:
            enemy.velocity = [0,0,0]
            enemy.position[0] = 105
            enemy.state = "jail_exit"
    # exit the jail
    elif my_state == "jail_exit":
        plus = shadow.input_velocity/2
        if enemy.position[2] < 165:
            move_velocity(state, task, enemy, [0, 0, plus])
        else:
            enemy.state = "normal"
    # move slowly
    elif my_state == "blue":
        move_blue(state, task, delta, enemy)
        if (state.now - game.ghost_time_start) > game.ghost_blink:
            enemy.state = "blink"
    # blink between blue and white
    elif my_state == "blink":
        move_blue(state, task, delta, enemy)
        if (state.now - game.ghost_time_start) > game.ghost_duration:
            enemy.children = enemy.normal_children
            enemy.state = "normal"
        else:
            animate_blink(state, task, enemy)
    # move around
    elif my_state == "normal":
        move_normal(state, task, delta, enemy)
    # move eyes toward jail
    elif my_state == "eyes":
        if is_close_vector_3(enemy.position, enemy.jail_position, 0.01):
            enemy.children = enemy.normal_children
            enemy.state = "jail_center"
        move_eyes(state, delta, enemy)
    else:
        print(["enemy in unknown state", enemy.name, my_state])

() move_eyes(object state, array delta, object enemy):

    velocity = move_eyes_velocity(enemy)
    geometries = state.geometries
    if velocity[0] < 0.0:
        enemy.children[0].geometry = geometries.eyes_left
    elif velocity[0] > 0.0:
        enemy.children[0].geometry = geometries.eyes_right
    elif velocity [1] > 0.0:
        enemy.children[0].geometry = geometries.eyes_down
    elif velocity[1] < 0.0:
        enemy.children[0].geometry = geometries.eyes_up
    enemy.velocity = velocity
    print(["in move_eyes", enemy.velocity])

(array velocity) move_eyes_velocity(object enemy):
    plus = enemy.input_velocity/2.0
    minus = -1*plus
    # possible directions
    directions = [
        [-1, 0, 0],
        [1, 0, 0],
        [0, 0, -1],
        [0, 0, 1]
    ]

    allowed = []
    # direction we want to go
    vector = subtract_arrays(enemy.jail_position, enemy.position)
    vectors = vectors_component(vector)

    for direction in directions:
        (direction_a, direction_s) = axis_sign_vector(direction)
        blocked = false
        for touch in enemy.touching:
            for normal in touch.normals:
                print(["move_eyes normal", normal])
                (normal_a, normal_s) = axis_sign_vector(normal)
                if normal_a == direction_a && normal_s == direction_s:
                    blocked = true
                    break
            if blocked:
                break
        if blocked == false:
            append(allowed, direction)

    next_direction = null
    bad_directions = []
    for direction in allowed:
        (direction_a, direction_s) = axis_sign_vector(direction)
        for vector in vectors:
            (axis, sign) = axis_sign_vector(vector)
            if axis == direction_a && sign == direction_s:
                next_direction = direction
                break
        if next_direction == null:
            append(bad_directions, direction)
        else:
            break
    if next_direction == null:
        next_direction = bad_directions[0]

    velocity = array_scaled(next_direction, enemy.input_velocity)

() build_graph():
    nodes = []
    for value in range(34):
        node = {
            "name": string(value),
            "edges": []
        }
        append(nodes, node)

    # edges
    pairs = [
        [0, 2],
        [0, 3],
        [0, 5],

        [1, 6],
        [1, 8],
        [1, 9],

        [2, 3],
        [3, 4],
        [4, 5],
        [5, 6],
        [6, 7],
        [7, 8],
        [8, 9],

        [2, 10],
        [3, 10],
        [4, 12],
        [7, 13],
        [8, 11],
        [9, 11],

        [12, 13],

        [10, 14],
        [12, 15],
        [13, 16],
        [4, 17],

        [14, 15],
        [16, 17],
        [14, 17],

        [14,20],
        [15,18],
        [16,19],
        [17,23],

        [18, 19],

        [18,21],
        [19,22],

        [20, 21],
        [22, 23],

        [20, 30],
        [20, 24],
        [21, 26],
        [22, 27],
        [23, 29],
        [23, 31],

        [24, 25],
        [25, 26],
        [26, 27],
        [27, 28],
        [28, 29],

        [24, 30],
        [29, 31],

        [30, 32],
        [25, 32],
        [28, 33],
        [31, 33]
    ]
    pairs = []
    for pair in pairs:
        append(pairs, pair)



() move_blue(object state, object task, array delta, object enemy):
    plus = enemy.input_velocity/2.0
    minus = -1*plus
    if delta == [0.0, 0.0, 0.0]:
        velocities = [[minus,0,0], [plus,0,0],[0,0,minus],[0,0,plus]]
        value = random()
        if value < 0.25:
            enemy.velocity = velocities[0]
        elif value < 0.50:
            enemy.velocity = velocities[1]
        elif value < 0.75:
            enemy.velocity = velocities[2]
        else:
            enemy.velocity = velocities[3]
    animate_ghost_legs(state, task, enemy)


# assume speed is > 0 in some direction
() move_velocity(object state, object task, object enemy, array velocity):
    enemy.velocity = velocity
    animate_enemy(state, task, enemy)

() animate_enemy(object state, object task, object enemy):
    # eyes
    geometries = state.geometries
    animate_eyes(geometries, enemy)
    # legs
    name = join([enemy.name, "legs"], "_")
    animate(task.animations{name}, state.things, geometries, state.now)

() animate_eyes(object geometries, object enemy):
    enemy_eyes = get_enemy_eyes(enemy)
    velocity = enemy.velocity
    if velocity[0] < 0.0: 
        geometry_name = join([enemy.name, "head_eyes_left"], "_")
        enemy_eyes.geometry = geometries{geometry_name}
    elif velocity[0] > 0.0:
        geometry_name = join([enemy.name, "head_eyes_right"], "_")
        enemy_eyes.geometry = geometries{geometry_name}
    elif velocity [1] > 0.0:
        geometry_name = join([enemy.name, "head_eyes_down"], "_")
        enemy_eyes.geometry = geometries{geometry_name}
    elif velocity[1] < 0.0:
        geometry_name = join([enemy.name, "head_eyes_up"], "_")
        enemy_eyes.geometry = geometries{geometry_name}



() move_normal(object state, object task, array delta, object enemy):
    if delta == [0.0, 0.0, 0.0]:
        plus = enemy.input_velocity
        minus = -1*plus
        velocities = [[minus,0,0], [plus,0,0],[0,0,minus],[0,0,plus]]
        value = random()
        if value < 0.25:
            enemy.velocity = velocities[0]
        elif value < 0.50:
            enemy.velocity = velocities[1]
        elif value < 0.75:
            enemy.velocity = velocities[2]
        else:
            enemy.velocity = velocities[3]

    animate_enemy(state, task, enemy)

() change_state(object state, object enemy, string enemy_state):
    if enemy_state == "blue":
        enemy.blue_time = state.now
        enemy.state = "blue"
    elif enemy_state == "eyes":
        enemy.state = "eyes"
        # change geometry
        #enemy.geometry
