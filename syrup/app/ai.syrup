from wafflecore.compute import (vectors_component, axis_sign_vector, array_scaled, subtract_arrays, is_close, is_close_vector_3)
from wafflecore.animation import animate

(object legs, object head) get_ghost_children(object ghost):
    for child in ghost.children:
        if child.type == "GhostLegs":
            legs = child
        else:
            head = child

(object legs) get_enemy_legs(object shadow):
    for child in shadow.children:
        if child.type == "EnemyLegs":
            legs = child

(object eyes) get_enemy_eyes(object shadow):
    for child in shadow.children:
        if child.type == "EnemyEyes":
            eyes = child

() animate_blink(object state, object task, object enemy):
    #(legs, head) = get_ghost_children(ghost)
    animation_name = join([enemy.name, "ghost_blink_legs"], "_")
    animate(task.animations{animation_name}, state.things, state.geometries, state.now)
    animation_name = join([enemy.name, "ghost_blink_head"], "_")
    animate(task.animations{animation_name}, state.things, state.geometries, state.now)

() animate_ghost_legs(object state, object task, object enemy):
    animation_name = join([enemy.name, "ghost_legs"], "_")
    animation = task.animations{animation_name}
    #(legs, head) = get_ghost_children(ghost)
    #print(["animate_shadow", shadow_legs.type, state.now])
    animate(animation, state.things, state.geometries, state.now)

() animate_shadow(object state):
    name = join([enemy.name, "legs"], "_")
    animation = task.animations{name}
    #shadow_legs = get_enemy_legs(enemy)
    #print(["animate_shadow", shadow_legs.type, state.now])
    animate(animation, state.things, state.geometries, state.now)

() ai_idle(object state, object task):
    for enemy in state.game.enemies:
        enemy_idle(state, task, enemy)

() enemy_idle(object state, object task, object shadow):
    #print(["ai_idle", shadow.state, shadow.position, shadow.last_position])
    # try to move
    enemy = shadow
    delta = subtract_arrays(shadow.position, shadow.last_position)
    shadow.last_position = shadow.position
    my_state = shadow.state
    game = state.game

    # move up and down
    if my_state  == "up_down":
        print(["up_down p v", enemy.name, enemy.position, enemy.velocity])
        if state.now - enemy.up_down_start > enemy.up_down_time:
            enemy.state = "jail_center"
            return
        if delta == [0.0, 0.0, 0.0]:
            plus = game.enemy_speed
            minus = -1*plus
            if enemy.position[2] == 136.0:
                move_velocity(state, task, enemy, [0, 0, plus])
            else:
                move_velocity(state, task, enemy, [0, 0, minus])
    # move toward jail center
    elif my_state == "jail_center":
        plus = game.enemy_speed
        minus = -1*plus
        if enemy.position[0] < 104:
            # move right
            move_velocity(state, task, enemy, [plus, 0, 0])
        elif enemy.position[0] > 106:
            move_velocity(state, task, enemy, [minus, 0, 0])
        else:
            enemy.velocity = [0,0,0]
            enemy.position[0] = 105
            enemy.state = "jail_exit"
    # exit the jail
    elif my_state == "jail_exit":
        plus = enemy.ghost_speed
        if enemy.position[2] < 165:
            move_velocity(state, task, enemy, [0, 0, plus])
        else:
            enemy.state = "normal"
    # move slowly
    elif my_state == "blue":
        move_blue(state, task, delta, enemy)
        if (state.now - game.ghost_time_start) > game.ghost_blink:
            enemy.state = "blink"
    # blink between blue and white
    elif my_state == "blink":
        move_blue(state, task, delta, enemy)
        if (state.now - game.ghost_time_start) > game.ghost_duration:
            enemy.children = enemy.normal_children
            enemy.state = "normal"
        else:
            animate_blink(state, task, enemy)
    # move around
    elif my_state == "normal":
        move_normal(state, task, delta, enemy)
    # move eyes toward jail
    elif my_state == "eyes":
        if is_close_vector_3(enemy.position, enemy.jail_position, 0.01):
            enemy.children = enemy.normal_children
            enemy.state = "jail_center"
        move_eyes(state, delta, enemy)
    else:
        print(["enemy in unknown state", enemy.name, my_state])

() move_eyes(object state, array delta, object enemy):

    move_eyes_velocity(state.game, delta, enemy)
    velocity = enemy.velocity
    geometries = state.geometries
    if velocity[0] < 0.0:
        enemy.children[0].geometry = geometries.eyes_left
    elif velocity[0] > 0.0:
        enemy.children[0].geometry = geometries.eyes_right
    elif velocity [1] > 0.0:
        enemy.children[0].geometry = geometries.eyes_down
    elif velocity[1] < 0.0:
        enemy.children[0].geometry = geometries.eyes_up
    #print(["in move_eyes", enemy.velocity])

(object path) path_eyes(object stage, object enemy):
    nodes = stage.nodes
    pairs = stage.pairs
    # find closest node
    index = 0
    destination = 34

    path = breadth_first(queue, edges, source, destination)

(array the_path) breadth_first(array edges, number source, number destination):
    # get to 34
    queue = [[source]]
    while true:
        path = pop(queue, 0)
        source = new_path(length(new_path) - 1)
        nodes = []
        for edge in edges:
            if edge.used:
                continue
            edge.used = true
            pair = edge.pair
            one = pair[0]
            two = pair[1]
            if one == source:
                append(nodes, two)
            elif two == source:
                append(nodes, one)

        for node in nodes:
            new_path = copy_object(path)
            append(new_path, node)
            if node == destination:
                the_path = new_path
                return
            append(queue, new_path)

(array indices) indices_position(array position):
    x = position[0]
    z = position[2]
    x_off = x - 5
    z_off = z - 21
    x_idx = x_off / 8
    x_mod = x_off % 8
    z_idx = z_off / 8
    z_mod = z_off % 8
    
    if x_mod >= 7:
        x_idx += 1
    elif x_mod >= 1:
        indices = null
        return

    if z_mod >= 7:
        z_idx += 1
    elif z_mod >= 1:
        indices = null
        return

    indices = [integer(x_idx), integer(z_idx)]

(array direction) get_direction(array navigation, array index):
    for rows in navigation:
        if rows[0][0][1] == index[1]:
            for row in rows:
                point = row[0]
                if point[0] == index[0]:
                    direction = row[1]
                    return
    direction = null

(array direction) try_direction(array normal):
    if normal[0] == 0:
        directions = [
            [1,0,0],
            [-1,0,0]
        ]
    else:
        directions = [
            [0,0,1],
            [0,0,-1]
        ]

    value = random()
    if value < 0.5:
        direction = directions[0]
    else:
        direction = directions[1]

() move_eyes_velocity(object game, array delta, object enemy):
    if enemy.eye_state == "start":
        # have we hit an open area?
        enemy_index = indices_position(enemy.position)
        if enemy_index != null:
            print(["enemy_index", enemy_index, enemy.position])
            navigation = game.stage.navigation
            direction = get_direction(navigation, enemy_index)
            if direction != null:
                print(["enemy_index corner", direction])
                # do some special things if in one of the
                # two special indices
                if is_close(enemy.position[2], 165, 1):
                    enemy.eye_state = "close"
                enemy.velocity = array_scaled(direction, game.enemy_speed)
        else:
            # just don't go back the way you came.
            if length(enemy.collisions) > 0:
                direction = try_direction(enemy.collisions[0].normal)

            # just keep going to some open area

    elif enemy.eye_state == "close":
        if is_close(enemy.position[0], 105, 1):
            enemy.velocity = [0, 0, -1*game.enemy_speed]
            enemy.eye_state = "down"
    elif enemy.eye_state == "down":
        if is_close(enemy.position[2], 141, 1):
            enemy.children = enemy.normal_children
            enemy.state = "jail_exit"


(array navigation) get_navigation():
    N = [0,0,1]
    S = [0,0,-1]
    E = [1,0,0]
    W = [-1,0,0]

    navigation = []
    one = [
    [[11, 251], S],
    [[51, 251], S],
    [[99, 251], S],
    [[123, 251], S],
    [[171, 251], S],
    [[211, 251], S]
    ]

    append(navigation, one)

    one = [
    [[11, 219], E],
    [[51, 219], E],
    [[75, 219], S],
    [[99, 219], W],
    [[123, 219], E],
    [[147, 219], S],
    [[171, 219], W],
    [[211, 219], W]
    ]

    append(navigation, one)

    one = [
    [[11, 195], E],
    [[51, 195], N],
    [[75, 195], E],
    [[99, 195], S],
    [[123, 195], S],
    [[147, 195], W],
    [[171, 195], N],
    [[211, 195], W]
    ]
    append(navigation, one)

    one = [
    [[75, 171], E],
    [[99, 171], E],
    [[123, 171], W],
    [[147, 171], W]
    ]
    append(navigation, one)

    one = [
    [[51, 147], E],
    [[75, 147], N],
    [[147, 147], N],
    [[171, 147], W]
    ]
    append(navigation, one)

    one =[
    [[75, 123], N],
    [[147, 123], N]
    ]
    append(navigation, one)

    one =[
    [[11, 99], E],
    [[51, 99], E],
    [[75, 99], N],
    [[99, 99], W],
    [[123, 99], E],
    [[147, 99], N],
    [[171, 99], W],
    [[211, 99], W]
    ]
    append(navigation, one)

    one =[
    [[11, 75], N],
    [[27, 75], W],
    [[51, 75], N],
    [[75, 75], W],
    [[99, 75], N],
    [[123, 75], N],
    [[147, 75], E],
    [[171, 75], N],
    [[195, 75], E],
    [[211, 75], N]
    ]
    append(navigation, one)

    one =[
    [[11, 51], E],
    [[27, 51], E],
    [[51, 51], N],
    [[75, 51], N],
    [[99, 51], W],
    [[123, 51], E],
    [[147, 51], N],
    [[171, 51], N],
    [[195, 51], W],
    [[211, 51], W]
    ]
    append(navigation, one)

    one =[
    [[11, 27], N],
    [[99, 27], N],
    [[123, 27], N],
    [[211, 27], N]
    ]
    append(navigation, one)

    for guide_list in navigation:
        for guide in guide_list:
            point = guide[0]
            new_x = (point[0] - 11) / 8
            new_y = (point[1] - 27) / 8
            guide[0] = [new_x, new_y]


() move_blue(object state, object task, array delta, object enemy):
    if delta == [0.0, 0.0, 0.0]:
        plus = state.game.ghost_speed
        minus = -1*plus
        velocities = [[minus,0,0], [plus,0,0],[0,0,minus],[0,0,plus]]
        value = random()
        if value < 0.25:
            enemy.velocity = velocities[0]
        elif value < 0.50:
            enemy.velocity = velocities[1]
        elif value < 0.75:
            enemy.velocity = velocities[2]
        else:
            enemy.velocity = velocities[3]

    animate_ghost_legs(state, task, enemy)


# assume speed is > 0 in some direction
() move_velocity(object state, object task, object enemy, array velocity):
    enemy.velocity = velocity
    animate_enemy(state, task, enemy)

() animate_enemy(object state, object task, object enemy):
    # eyes
    geometries = state.geometries
    animate_eyes(geometries, enemy)
    # legs
    name = join([enemy.name, "legs"], "_")
    animate(task.animations{name}, state.things, geometries, state.now)

() animate_eyes(object geometries, object enemy):
    enemy_eyes = get_enemy_eyes(enemy)
    velocity = enemy.velocity
    if velocity[0] < 0.0: 
        geometry_name = join([enemy.name, "head_eyes_left"], "_")
        enemy_eyes.geometry = geometries{geometry_name}
    elif velocity[0] > 0.0:
        geometry_name = join([enemy.name, "head_eyes_right"], "_")
        enemy_eyes.geometry = geometries{geometry_name}
    elif velocity [1] > 0.0:
        geometry_name = join([enemy.name, "head_eyes_down"], "_")
        enemy_eyes.geometry = geometries{geometry_name}
    elif velocity[1] < 0.0:
        geometry_name = join([enemy.name, "head_eyes_up"], "_")
        enemy_eyes.geometry = geometries{geometry_name}



() move_normal(object state, object task, array delta, object enemy):
    if delta == [0.0, 0.0, 0.0]:
        plus = state.game.enemy_speed
        minus = -1*plus
        velocities = [[minus,0,0], [plus,0,0],[0,0,minus],[0,0,plus]]
        value = random()
        if value < 0.25:
            enemy.velocity = velocities[0]
        elif value < 0.50:
            enemy.velocity = velocities[1]
        elif value < 0.75:
            enemy.velocity = velocities[2]
        else:
            enemy.velocity = velocities[3]

    animate_enemy(state, task, enemy)

() change_state(object state, object enemy, string enemy_state):
    if enemy_state == "blue":
        enemy.blue_time = state.now
        enemy.state = "blue"
    elif enemy_state == "eyes":
        enemy.state = "eyes"
        # change geometry
        #enemy.geometry
